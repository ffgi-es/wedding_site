name: cd

on:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed
    branches:
      - 'main'
  workflow_dispatch:
    inputs:
      image_tag:
        required: false
        default: none
        type: string

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_CLIENT_SECRET: "${{ secrets.AZURE_CLIENT_SECRET }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENENT_ID }}"

jobs:
  get-image-tag:
    name: Get Image Tag
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.output.outputs.IMAGE_TAG }}
    steps:
      - name: Download Image Tag
        if: ${{ github.event_name == 'workflow_run' }}
        uses: actions/download-artifact@v4
        with:
          name: image-tag
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Set Image Tag
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo "IMAGE_TAG=$TAG" > image-tag.txt
        env:
          TAG: ${{ inputs.image_tag }}

      - name: Output Image Tag
        id: output
        run: cat image-tag.txt >> "$GITHUB_OUTPUT"

      - name: Add Job Summary
        env:
          FOUND_TAG: ${{ steps.output.outputs.IMAGE_TAG }}
        run: 'echo "Deploying tag: $FOUND_TAG" >> $GITHUB_STEP_SUMMARY'

  terraform-plan:
    name: Terraform Plan
    needs: get-image-tag
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      
      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: tf-plan
        env:
          TF_VAR_image_tag: ${{ needs.get-image-tag.outputs.image-tag }}
          TF_VAR_docker_username: ${{ secrets.DOCKERHUB_USERNAME}}
          TF_VAR_docker_token: ${{ secrets.DOCKERHUB_TOKEN}}
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi
      
      # Save plan to artifacts  
      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan
          
      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          
          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT
          
      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

  terraform-apply:
    name: 'Terraform Apply'
    if: needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: ./terraform
    #environment: production
    needs: [terraform-plan]
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Download saved plan from artifacts  
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: terraform

    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
